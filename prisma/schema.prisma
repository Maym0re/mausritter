// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  // Game-related fields
  ownedCampaigns Campaign[] @relation("CampaignOwner")
  characters     Character[]
  playerIn       CampaignPlayer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)

  // Game Master
  gmId        String
  gm          User     @relation("CampaignOwner", fields: [gmId], references: [id], onDelete: Cascade)

  // Players
  players     CampaignPlayer[]
  characters  Character[]

  // Game state
  currentTurn Int      @default(0)
  currentTime Json     @default("{}")
  season      String   @default("Spring")
  weather     Json?

  // Map data
  hexMap      HexMap?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todaysEvent String?
}

model CampaignPlayer {
  id         String @id @default(cuid())
  campaignId String
  userId     String

  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt   DateTime @default(now())

  @@unique([campaignId, userId])
}

model Character {
  id          String   @id @default(cuid())
  name        String
  notes       String?

  // Owner
  playerId    String
  player      User     @relation(fields: [playerId], references: [id], onDelete: Cascade)

  // Campaign
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Attributes
  str         Int      @default(10)
  dex         Int      @default(10)
  wil         Int      @default(10)

  // Health
  hp          Int      @default(6)
  maxHp       Int      @default(6)

  // Character details
  background     Json     @default("{}")
  birthsign      Json     @default("{}")
  coat           Json     @default("{}")
  physicalDetail String

  // Game mechanics
  level       Int      @default(1)
  xp          Int      @default(0)
  grit        Int      @default(0)
  pips        Int      @default(0)

  // Inventory as JSON
  inventory   Json     @default("[]")
  conditions  Json     @default("[]")

  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HexMap {
  id         String @id @default(cuid())
  campaignId String @unique
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Map settings
  size       Int    @default(5) // 5x5 grid
  centerX    Int    @default(2)
  centerY    Int    @default(2)

  // Hex data as JSON
  hexes      Json   @default("{}")

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
