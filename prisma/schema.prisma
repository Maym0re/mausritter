generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../src/generated/zod"
  relationModel = true
  includeScalarDefaultValue = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SlotType {
  PAWS
  BODY
  PACK
}

enum SeasonName {
  SPRING
  SUMMER
  AUTUMN
  WINTER
}

enum SettlementSize {
  FARM
  CROSSROADS
  HAMLET
  VILLAGE
  TOWN
  CITY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  // Game-related fields
  ownedCampaigns Campaign[]       @relation("CampaignOwner")
  characters     Character[]
  playerIn       CampaignPlayer[]

  diceRollLogs   DiceRollLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id          String  @id @default(cuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  // Game Master
  gmId String
  gm   User   @relation("CampaignOwner", fields: [gmId], references: [id], onDelete: Cascade)

  // Players
  players    CampaignPlayer[]
  characters Character[]

  // Game state
  gameTime       GameTime?
  season         SeasonName    @default(SPRING)
  weatherEntryId String?
  weatherEntry   WeatherEntry? @relation(fields: [weatherEntryId], references: [id], onDelete: SetNull)

  // Map data
  hexMap HexMap?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todaysEvent String?

  diceRolls DiceRollLog[]
}

model CampaignPlayer {
  id         String @id @default(cuid())
  campaignId String
  userId     String

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())

  @@unique([campaignId, userId])
}

model Character {
  id    String  @id @default(cuid())
  name  String
  notes String?

  // Owner
  playerId String
  player   User   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  // Campaign
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Attributes
  str Int @default(10)
  dex Int @default(10)
  wil Int @default(10)

  // Health
  hp    Int @default(6)
  maxHp Int @default(6)

  // Character details
  backgroundId String
  birthsignId  String
  coatId       String

  background     Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  birthsign      Birthsign  @relation(fields: [birthsignId], references: [id], onDelete: Cascade)
  coat           Coat       @relation(fields: [coatId], references: [id], onDelete: Cascade)
  physicalDetail String?

  // Game mechanics
  level Int @default(1)
  xp    Int @default(0)
  grit  Int @default(0)
  pips  Int @default(0)

  inventory  InventoryItem[]
  conditions Condition[]     @relation("CharacterConditions")

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Background {
  id         String      @id @default(cuid())
  name       String      @unique
  itemA      String
  itemB      String
  characters Character[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Birthsign {
  id          String      @id @default(cuid())
  sign        String      @unique
  disposition String
  characters  Character[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coat {
  id         String      @id @default(cuid())
  color      String
  pattern    String
  characters Character[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([color, pattern])
}

model Condition {
  id               String      @id @default(cuid())
  name             String      @unique
  description      String
  clearRequirement String?
  effects          String[]
  characters       Character[] @relation("CharacterConditions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryItem {
  id          String    @id @default(cuid())
  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  name        String
  type        String
  size        Int
  usage       Int       @default(0)
  maxUsage    Int
  description String?
  value       Int?
  slotType    SlotType
  slotIndex   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([characterId, slotType, slotIndex])
}

model HexMap {
  id         String   @id @default(cuid())
  campaignId String   @unique
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  size    Int @default(5) // 5x5 grid
  centerX Int @default(2)
  centerY Int @default(2)

  cells HexCell[]

  images MapImage[]

  markers MapMarker[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MapImage {
  id        String   @id @default(cuid())
  hexMapId  String
  hexMap    HexMap   @relation(fields: [hexMapId], references: [id], onDelete: Cascade)
  data      String
  x         Float
  y         Float
  width     Float
  height    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hexMapId])
}

model MapMarker {
  id        String   @id @default(cuid())
  hexMapId  String
  hexMap    HexMap   @relation(fields: [hexMapId], references: [id], onDelete: Cascade)
  image     String
  x         Float
  y         Float
  z         Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hexMapId])
}

model HexType {
  id          String @id
  name        String
  color       String
  description String

  landmarks Landmark[]
  HexCell   HexCell[]
}

model Landmark {
  id          String @id
  name        String
  description String

  hexTypeId String
  hexType   HexType @relation(fields: [hexTypeId], references: [id], onDelete: Cascade)

  details LandmarkDetail[]
  HexCell HexCell[]
}

model LandmarkDetail {
  id          String    @id
  description String
  effect      String?
  Landmark    Landmark? @relation(fields: [landmarkId], references: [id])
  landmarkId  String?
  HexCell     HexCell[]
}

model Settlement {
  id          String         @id
  name        String
  size        SettlementSize
  governance  String
  inhabitants String
  feature     String
  industry    String
  event       String
  population  Int
  HexCell     HexCell[]
}

model HexCell {
  id String @id @default(cuid())

  hexMapId String
  hexMap   HexMap @relation(fields: [hexMapId], references: [id], onDelete: Cascade)

  q Int
  r Int
  s Int

  hexTypeId String
  hexType   HexType @relation(fields: [hexTypeId], references: [id], onDelete: Restrict)

  landmarkId String?
  landmark   Landmark? @relation(fields: [landmarkId], references: [id], onDelete: SetNull)

  landmarkDetailId String?
  landmarkDetail   LandmarkDetail? @relation(fields: [landmarkDetailId], references: [id], onDelete: SetNull)

  settlementId String?
  settlement   Settlement? @relation(fields: [settlementId], references: [id], onDelete: SetNull)

  isRevealed  Boolean @default(false)
  notes       String  @default("")
  customName  String?
  masterNotes String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hexMapId, q, r, s])
  @@index([hexMapId])
  @@index([hexTypeId])
  @@index([landmarkId])
  @@index([settlementId])
}

model GameTime {
  id         String   @id @default(cuid())
  campaignId String   @unique
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  rounds  Int @default(0)
  turns   Int @default(0)
  watches Int @default(0)
  days    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WeatherEntry {
  id              String     @id @default(cuid())
  season          SeasonName
  roll            Int
  weather         String
  isPoorCondition Boolean
  Campaign        Campaign[]

  @@unique([season, roll])
  @@index([season])
}

model SeasonalEvent {
  id          String     @id @default(cuid())
  season      SeasonName
  description String
  effect      String?

  @@index([season])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DiceRollLog {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notation   String
  total      Int
  createdAt  DateTime @default(now())
  entries    DiceRollEntry[]

  @@index([campaignId, createdAt])
  @@index([userId, createdAt])
}

model DiceRollEntry {
  id        String       @id @default(cuid())
  logId     String
  log       DiceRollLog  @relation(fields: [logId], references: [id], onDelete: Cascade)
  order     Int
  type      String
  value     Int
  sides     Int?
  createdAt DateTime     @default(now())

  @@index([logId])
}
